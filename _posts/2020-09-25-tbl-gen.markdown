---
layout: post
title:  "LLVM TableGen Tool"
date:   2020-09-25 11:31:38 +0530
categories: Compiler
---

# Introduction

Let's say, we are registering a new target machine, named - XYZ, within LLVM
infrastructure. Naturally, we need to programmatically represent the XYZ machine
instruction set within LLVM. Let's assume, XYZ supports several hundreds of
different machine instructions. We need to programmatically represent each one
of these several hundred instructions. One way to achieve this is to create a
separate C++ class definition for each of the supported instruction, which
means, programmer has to `manually` code all these hundreds of classes, which is
literally a laborious and boring task. And what's more, several of these machine
instructions share some common features, which we either need to manually
abstract away into some common base class(es) or we need to repeat these common
features in all the classes representing those instructions which share common
features.

The XYZ's machine instruction set tells only the part of the story about the XYZ
target machine. There are other key descriptions of the XYZ machine, like
register file, addressing modes, etc which also need to be programmatically
represented within LLVM infrastructure. Further, since instructions use
registers as their operand fields, we need to establish some kind of
relationship between the classes which represent instructions, and the classes
which represent registers. When some changes happen, say, to registers
representation, then we need to update all their representative classes and also
the instructions related classes which relate to changed registers.

All in all, supporting XYZ target back-end within LLVM infrastructure results in
a complex piece of software and never ending painful task to maintain it. What
if, there exist some kind of tool which automate above mentioned mundane tasks,
which greatly simplifies the process of supporting new XYZ target machine within
LLVM infrastructure and reduces the pain of maintaining it over the time. It is
really nice to have such a tool, right? Simply speaking, `LLVM TableGen` is such
a (partial) automation tool.

LLVM TableGen tool is generic enough in the sense that, it can also be used to
(partially) automate other compiler tasks such as abstract syntax tree (AST)
representation within Clang, error diagnostic implementation within Clang, etc
apart from using it to (partially) automate target machine implementation within
LLVM.

Ok, good to know about such an useful role that TableGen tool is playing within
LLVM infrastructure projects, but, how does it actually work?, how does it
actually fullfil its role of automating the stuffs that we discussed above?
Let's read-on.

# Basic Concept

If we look into the history of programming, we find that one general way of
automating some manual, repetitive, boring programming stuff is via what we call
`Domain Specific Languages` or `DSL` for short. LLVM TableGen is no different, but
one such DSL. Being a DSL, LLVM TableGen has its own language constructs, like a 
set of lexical tokens, a set of syntactic statements, set of syntactic grammer
rules which formally describe the language, etc. Again, being a DSL, these
language constructs are designed from the perspective of it specified role of
automating some of the programming stuffs within LLVM infrastructure which we
touched upon in the previous section.

The main idea of LLVM TableGen is as follows:

* Expose few key language constructs which allows LLVM hackers to `easly and
  succinctly` describe the programming task at hand, for example, the description
  of target machine instruction set. This description will be captured in what we
  call a TableGen source file whose name is being suffixed with the extension
  `.td`, say, `XYZ.td`.
* Then, pass this TableGen source file to TableGen compiler front-end which will
  parse the file, and generate an expanded TableGen file as output (we will
  describe details of this output file later, but, for now let's assume that it is
  an exapanded version of input TableGen source file).
* Then, there can exist several TableGen compiler back-ends which will take
  above front-end produced expanded TableGen file as their input, filter out its
  content as per their need, provide meaning to the expanded contents in the file,
  and generate specific set C++ files as output. These C++ files are suffixed with
  the extension `.inc`.
* Finally, we can combine above TableGen`erated C++ files within LLVM
  infrastructure and use them as regular C++ source files as if we were handed
  coded them.

# Programming Insight

Ok, good to know, but, how does the TableGen language constructs help programmers
to `easly and succinctly` describe the programming task at hand, say, for example,
description of a target machine instruction set? Good question, let's discuss it.

Generally speaking, when we want to programmatically represent an instuction of
a target machine instruction set, we need to capture certain attributes of that
instructions, like opecode, operand registers, predicates to name few. These
attributes can be captured in a `record` format (just like a database record). To
this end, TableGen provides one of the key constructs, called `class`, it is also
called an `abstract record`. For example, we can hypothetically describe a binary
instruction as below.

```cpp
class BinaryInst {
  // define attr_1; 
  // define attr_2;
  ................
  // define attr_k;
}
```

Once an abstract record is defined as above using a `class` construct, then we can
define specific binary instruction using an another construct called `def`
construct, which is also called a `concrete record`. For example, we can define
an hypothetical binary instruction `add` as below.

```cpp
def Add : BinaryInst {
  // define add_specific_attr_1; 
  // define add_specific_attr_2;
  .............................
  // define add_specific_attr_m;
}
```

Here, the concrete record `Add` inherits the abstract record `BinaryInst` so that
all the attributes of `BinaryInst` also become attributes of `Add`. Similarly, we
can also define other binary instructions like `mul`, `sub`, etc as concrete records
as described above.

The glimpse here is that, we can make use of `class (abstract record)` constuct to
define an insturction class like binary instruction class, and then we can define
specific binary instruction using `def (concrete class)` construct.

Let's play with few very very simple TableGen programs.
